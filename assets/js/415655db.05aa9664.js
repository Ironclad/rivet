"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1043],{5591:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>f});var r=t(8527);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),y=i,f=u["".concat(s,".").concat(y)]||u[y]||g[y]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=y;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},1208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(4465),i=(t(8527),t(5591));const o={},a="Settings",p={unversionedId:"api-reference/core/Settings",id:"api-reference/core/Settings",title:"Settings",description:"Description",source:"@site/docs/api-reference/core/Settings.mdx",sourceDirName:"api-reference/core",slug:"/api-reference/core/Settings",permalink:"/docs/api-reference/core/Settings",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/core/Settings.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"Project",permalink:"/docs/api-reference/core/Project"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Definition",id:"definition",level:2},{value:"Properties",id:"properties",level:2},{value:"openAiKey",id:"openaikey",level:3},{value:"openAiOrganization",id:"openaiorganization",level:3},{value:"Usage",id:"usage",level:2},{value:"See Also",id:"see-also",level:2}],l={toc:c},u="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"settings"},"Settings"),(0,i.yg)("h2",{id:"description"},"Description"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Settings")," is an interface that encapsulates the configuration options required for the integration with OpenAI services in the graph execution process."),(0,i.yg)("h2",{id:"definition"},"Definition"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"export interface Settings {\n  openAiKey: string;\n  openAiOrganization?: string;\n}\n")),(0,i.yg)("h2",{id:"properties"},"Properties"),(0,i.yg)("h3",{id:"openaikey"},"openAiKey"),(0,i.yg)("p",null,"Type: ",(0,i.yg)("inlineCode",{parentName:"p"},"string")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"openAiKey")," property represents the API key for OpenAI. This key is used to authenticate your application with OpenAI services. It is a required property for the ",(0,i.yg)("inlineCode",{parentName:"p"},"Settings")," interface."),(0,i.yg)("h3",{id:"openaiorganization"},"openAiOrganization"),(0,i.yg)("p",null,"Type: ",(0,i.yg)("inlineCode",{parentName:"p"},"string")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"openAiOrganization")," property represents the organization ID to use for OpenAI. Use this if your API key's default organization is not the one you want to use. This property is optional."),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Settings")," interface is part of the ",(0,i.yg)("inlineCode",{parentName:"p"},"RunGraphOptions")," type and is used to provide OpenAI-specific settings for the graph execution process."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-typescript"},"const options: RunGraphOptions = {\n  // Other properties...\n  settings: {\n    openAiKey: 'your-openai-key',\n    openAiOrganization: 'your-openai-organization-id',\n  },\n};\n")),(0,i.yg)("h2",{id:"see-also"},"See Also"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"../node/RunGraphOptions"},"RunGraphOptions")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://platform.openai.com/docs/api-reference/authentication"},"OpenAI Documentation")," (for more information about OpenAI keys and organization IDs)")))}g.isMDXComponent=!0}}]);