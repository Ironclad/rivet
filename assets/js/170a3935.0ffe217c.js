"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9878],{5591:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>f});var n=r(8527);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),h=a,f=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8111:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(4465),a=(r(8527),r(5591));const o={title:"Executing AI Chains"},i=void 0,c={unversionedId:"user-guide/executing-ai-chains",id:"user-guide/executing-ai-chains",title:"Executing AI Chains",description:"Data Flow",source:"@site/docs/user-guide/executing-ai-chains.md",sourceDirName:"user-guide",slug:"/user-guide/executing-ai-chains",permalink:"/docs/user-guide/executing-ai-chains",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/user-guide/executing-ai-chains.md",tags:[],version:"current",frontMatter:{title:"Executing AI Chains"},sidebar:"userGuide",previous:{title:"Working with Projects",permalink:"/docs/user-guide/working-with-projects"},next:{title:"Splitting",permalink:"/docs/user-guide/splitting"}},s={},l=[{value:"Data Flow",id:"data-flow",level:2},{value:"Chaining AI Responses",id:"chaining-ai-responses",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...o}=e;return(0,a.yg)(p,(0,n.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"data-flow"},"Data Flow"),(0,a.yg)("p",null,"In general, data flows from ",(0,a.yg)("strong",{parentName:"p"},"left to right")," in a graph."),(0,a.yg)("p",null,"Graph execution will start from every node that does not have any inputs. You can refer to these nodes as ",(0,a.yg)("strong",{parentName:"p"},"root nodes"),"."),(0,a.yg)("p",null,"When a node is executed, it will send its output to all of its connected nodes."),(0,a.yg)("p",null,"A node must wait for all of its inputs to be received before it can execute."),(0,a.yg)("p",null,"The following graph will ",(0,a.yg)("em",{parentName:"p"},"roughly"),' execute in the order of these numbers. Every node with the same number will run in parallel. The arrows show the rough "flow" of the data.'),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Data Flow",src:r(1447).A,width:"2426",height:"892"})),(0,a.yg)("h2",{id:"chaining-ai-responses"},"Chaining AI Responses"),(0,a.yg)("p",null,"A common flow for chaining AI responses will be something like:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Initialize a system prompt by using a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/text"},"Text Node")," or a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/prompt"},"Prompt Node"),", and connect the text to the System Prompt port of a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/chat"},"Chat Node"),"."),(0,a.yg)("li",{parentName:"ul"},"Construct your main prompt by using a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/text"},"Text Node")," or a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/prompt"},"Prompt Node"),", and connect the text to the Prompt port of a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/chat"},"Chat Node"),". You may also use an ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/assemble-prompt"},"Assemble Prompt Node")," to construct a series of messages to send to the Chat node. The Prompt input of the chat node accepts a string, array of strings, a chat message (from a Prompt node), or an array of chat messages (which can be constructed using an Assemble Prompt node)."),(0,a.yg)("li",{parentName:"ul"},"Commonly you will want to parse the output text of the Chat node. This can be accomplished using the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-with-regex"},"Extract with Regex Node"),", the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-json"},"Extract JSON Node"),", or the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-yaml"},"Extract YAML")," node. You can also use the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-with-regex"},"Extract with Regex Node")," to extract multiple values from the output text."),(0,a.yg)("li",{parentName:"ul"},"Next, it is common to use an ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-object-path"},"Extract Object Path")," node to extract a specific value from the structured data using jsonpath. This is useful if you are using the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-json"},"Extract JSON Node")," or the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/extract-yaml"},"Extract YAML")," node."),(0,a.yg)("li",{parentName:"ul"},"You may want to take different actions depending on what your extracted value is. For this, you can use the ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/match"},"Match Node")," to match the extracted value against a series of patterns. Or, you can use an ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/if-else"},"If/Else Node")," to get fallback values."),(0,a.yg)("li",{parentName:"ul"},"Next, you will often want to use more ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/text"},"Text Nodes")," or ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/prompt"},"Prompt Nodes")," while interpolating the value you extracted, to construct a new message to send to another ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/chat"},"Chat Node"),"."),(0,a.yg)("li",{parentName:"ul"},"The above chain can then continue indefinitely, with the output of one Chat node being used as the input to another Chat node. Or, you can use a ",(0,a.yg)("a",{parentName:"li",href:"../node-reference/loop-controller"},"Loop Controller Node")," to pipe the results of this chain back into itself, for OODA AI agent application.")))}d.isMDXComponent=!0},1447:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/data-flow-020008f3806c14c8794caf36593460d5.png"}}]);