"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4726],{5591:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(8527);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(n),p=a,m=c["".concat(u,".").concat(p)]||c[p]||g[p]||l;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8280:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(8527),a=n(4351);const l={tabItem:"tabItem_o9Hs"};function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.A)(l.tabItem,o),hidden:n},t)}},6415:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(4465),a=n(8527),l=n(4351),o=n(1808),i=n(1849),u=n(7917),s=n(8418),d=n(3514);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function g(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u.aZ)(l),(0,a.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,l=g(e),[o,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[u,s]=m({queryString:n,groupId:r}),[c,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,d.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:r}),h=(()=>{const e=u??c;return p({value:e,tabValues:l})?e:null})();(0,a.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),y(e)}),[s,y,l]),tabValues:l}}var h=n(8613);const f={tabList:"tabList_Dwv5",tabItem:"tabItem_KiUr"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),g=e=>{const t=e.currentTarget,n=d.indexOf(t),r=s[n].value;r!==i&&(c(t),u(r))},p=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:p,onClick:g},o,{className:(0,l.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:r}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=y(e);return a.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},a.createElement(b,(0,r.A)({},e,t)),a.createElement(N,(0,r.A)({},e,t)))}function w(e){const t=(0,h.A)();return a.createElement(v,(0,r.A)({key:String(t)},e))}},376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(4465),a=(n(8527),n(5591)),l=n(6415),o=n(8280);const i={id:"vector-knn",title:"Vector K-Nearest Neighbors Node",sidebar_label:"Vector KNN"},u="Vector Nearest Neighbors Node",s={unversionedId:"node-reference/vector-knn",id:"node-reference/vector-knn",title:"Vector K-Nearest Neighbors Node",description:"Overview",source:"@site/docs/node-reference/vector-knn.mdx",sourceDirName:"node-reference",slug:"/node-reference/vector-knn",permalink:"/docs/node-reference/vector-knn",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/node-reference/vector-knn.mdx",tags:[],version:"current",frontMatter:{id:"vector-knn",title:"Vector K-Nearest Neighbors Node",sidebar_label:"Vector KNN"},sidebar:"nodeReference",previous:{title:"Vector Store",permalink:"/docs/node-reference/vector-store"},next:{title:"Code",permalink:"/docs/node-reference/code"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Overview",id:"overview-1",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Editor Settings",id:"editor-settings",level:2},{value:"Example 1: Find the nearest neighbors of a vector in a Pinecone database",id:"example-1-find-the-nearest-neighbors-of-a-vector-in-a-pinecone-database",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"FAQ",id:"faq",level:2},{value:"See Also",id:"see-also",level:2}],g={toc:c},p="wrapper";function m(e){let{components:t,...i}=e;return(0,a.yg)(p,(0,r.A)({},g,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"vector-nearest-neighbors-node"},"Vector Nearest Neighbors Node"),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"The Vector KNN Node takes a vector embedding and searches for K similar vectors."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Chat Node Screenshot",src:n(1486).A,width:"724",height:"434"})),(0,a.yg)("h2",{id:"overview-1"},"Overview"),(0,a.yg)("p",null,"The Vector K-Nearest Neighbors (KNN) Node is used to perform a k-nearest neighbors search on vectors stored in a configured vector database integration. It takes in a vector and returns the k closest vectors and their corresponding data."),(0,a.yg)("p",null,"This node is useful when working with vector databases such as Pinecone, where you might want to find the vectors in the database that are most similar to a given input vector."),(0,a.yg)(l.A,{defaultValue:"inputs",values:[{label:"Inputs",value:"inputs"},{label:"Outputs",value:"outputs"},{label:"Editor Settings",value:"settings"}],mdxType:"Tabs"},(0,a.yg)(o.A,{value:"inputs",mdxType:"TabItem"},(0,a.yg)("h2",{id:"inputs"},"Inputs"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Title"),(0,a.yg)("th",{parentName:"tr",align:null},"Data Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Default Value"),(0,a.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Vector"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"vector")),(0,a.yg)("td",{parentName:"tr",align:null},"The vector to find the nearest neighbors for."),(0,a.yg)("td",{parentName:"tr",align:null},"(required)"),(0,a.yg)("td",{parentName:"tr",align:null},"The input will be coerced into a vector if it is not a vector.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Integration"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"The name of the vector database integration to use."),(0,a.yg)("td",{parentName:"tr",align:null},"(optional)"),(0,a.yg)("td",{parentName:"tr",align:null},"Only required if ",(0,a.yg)("inlineCode",{parentName:"td"},"Use Integration Input")," is enabled in the editor settings.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"K"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"number")),(0,a.yg)("td",{parentName:"tr",align:null},"The number of nearest neighbors to find."),(0,a.yg)("td",{parentName:"tr",align:null},"(optional)"),(0,a.yg)("td",{parentName:"tr",align:null},"Only required if ",(0,a.yg)("inlineCode",{parentName:"td"},"Use K Input")," is enabled in the editor settings.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Collection ID"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string")),(0,a.yg)("td",{parentName:"tr",align:null},"The ID of the collection in the vector database to search for the nearest neighbors."),(0,a.yg)("td",{parentName:"tr",align:null},"(optional)"),(0,a.yg)("td",{parentName:"tr",align:null},"Only required if ",(0,a.yg)("inlineCode",{parentName:"td"},"Use Collection ID Input")," is enabled in the editor settings."))))),(0,a.yg)(o.A,{value:"outputs",mdxType:"TabItem"},(0,a.yg)("h2",{id:"outputs"},"Outputs"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Title"),(0,a.yg)("th",{parentName:"tr",align:null},"Data Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Results"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"any[]")),(0,a.yg)("td",{parentName:"tr",align:null},"The k nearest neighbors to the input vector, along with their corresponding data."),(0,a.yg)("td",{parentName:"tr",align:null},"If the value is not found, this port is not ran."))))),(0,a.yg)(o.A,{value:"settings",mdxType:"TabItem"},(0,a.yg)("h2",{id:"editor-settings"},"Editor Settings"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Setting"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"),(0,a.yg)("th",{parentName:"tr",align:null},"Default Value"),(0,a.yg)("th",{parentName:"tr",align:null},"Use Input Toggle"),(0,a.yg)("th",{parentName:"tr",align:null},"Input Data Type"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Integration"),(0,a.yg)("td",{parentName:"tr",align:null},"The name of the vector database integration to use."),(0,a.yg)("td",{parentName:"tr",align:null},"(empty)"),(0,a.yg)("td",{parentName:"tr",align:null},"Yes"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"K"),(0,a.yg)("td",{parentName:"tr",align:null},"The number of nearest neighbors to find."),(0,a.yg)("td",{parentName:"tr",align:null},"10"),(0,a.yg)("td",{parentName:"tr",align:null},"Yes"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"number"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Collection ID"),(0,a.yg)("td",{parentName:"tr",align:null},"The ID of the collection in the vector database to search for the nearest neighbors."),(0,a.yg)("td",{parentName:"tr",align:null},"(empty)"),(0,a.yg)("td",{parentName:"tr",align:null},"Yes"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"string"))))))),(0,a.yg)("h2",{id:"example-1-find-the-nearest-neighbors-of-a-vector-in-a-pinecone-database"},"Example 1: Find the nearest neighbors of a vector in a Pinecone database"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Create a ",(0,a.yg)("a",{parentName:"li",href:"/docs/node-reference/text"},"Text Node")," with the text you want to search for nearest neighbors of."),(0,a.yg)("li",{parentName:"ol"},"Connect the Text Node to a ",(0,a.yg)("a",{parentName:"li",href:"./get-embedding"},"Get Embedding Node")," to convert the text into a vector."),(0,a.yg)("li",{parentName:"ol"},"Create a Vector KNN Node and connect the Vector Node to its ",(0,a.yg)("inlineCode",{parentName:"li"},"Vector")," input. Set the ",(0,a.yg)("inlineCode",{parentName:"li"},"Integration")," to ",(0,a.yg)("inlineCode",{parentName:"li"},"pinecone"),", the ",(0,a.yg)("inlineCode",{parentName:"li"},"K")," to ",(0,a.yg)("inlineCode",{parentName:"li"},"10"),", and the ",(0,a.yg)("inlineCode",{parentName:"li"},"Collection ID")," to the ID of your Pinecone collection."),(0,a.yg)("li",{parentName:"ol"},"Run the graph. The Vector KNN Node should output the 10 nearest neighbors to the input vector in the Pinecone collection.")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Vector KNN Node Example 1",src:n(7719).A,width:"2704",height:"764"})),(0,a.yg)("h2",{id:"error-handling"},"Error Handling"),(0,a.yg)("p",null,"The Vector KNN Node will throw an error if the input vector is not a vector, or if the specified vector database integration is not found. If the specified collection ID is not found in the vector database, the node will return an empty array."),(0,a.yg)("h2",{id:"faq"},"FAQ"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Q: Can I use the Vector KNN Node with other vector database integrations?")),(0,a.yg)("p",null,"A: Yes, you can use the Vector KNN Node with any vector database integration supported by Rivet, such as Pinecone. You just need to specify the name of the integration in the ",(0,a.yg)("inlineCode",{parentName:"p"},"Integration")," setting of the node."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Q: Can I find the nearest neighbors of multiple vectors at once?")),(0,a.yg)("p",null,"A: No, the Vector KNN Node can only find the nearest neighbors of a single vector at a time. If you want to find the nearest neighbors of multiple vectors, you would need to use multiple Vector KNN Nodes, one for each vector."),(0,a.yg)("h2",{id:"see-also"},"See Also"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"/docs/user-guide/plugins/built-in/pinecone"},"Pinecone"))))}m.isMDXComponent=!0},7719:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vector-knn-node-example-01-2933540761242a3c378e0c77d6fbb6cd.png"},1486:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/vector-knn-node-90beeeb5f4ef17509236e40e6b3a7009.png"}}]);