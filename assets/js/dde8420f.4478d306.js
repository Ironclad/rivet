"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8e3],{5591:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>h});var n=t(8527);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,h=u["".concat(s,".").concat(d)]||u[d]||g[d]||a;return t?n.createElement(h,i(i({ref:r},c),{},{components:t})):n.createElement(h,i({ref:r},c))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1922:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=t(4465),o=(t(8527),t(5591));const a={},i="startDebuggerServer",l={unversionedId:"api-reference/node/startDebuggerServer",id:"api-reference/node/startDebuggerServer",title:"startDebuggerServer",description:"Description",source:"@site/docs/api-reference/node/startDebuggerServer.mdx",sourceDirName:"api-reference/node",slug:"/api-reference/node/startDebuggerServer",permalink:"/docs/api-reference/node/startDebuggerServer",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/node/startDebuggerServer.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"runGraphInFile",permalink:"/docs/api-reference/node/runGraphInFile"},next:{title:"DebuggerEvents",permalink:"/docs/api-reference/node/DebuggerEvents"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"getClientsForProcessor",id:"getclientsforprocessor",level:3},{value:"getProcessorsForClient",id:"getprocessorsforclient",level:3},{value:"server",id:"server",level:3},{value:"port",id:"port",level:3},{value:"dynamicGraphRun",id:"dynamicgraphrun",level:3},{value:"allowGraphUpload",id:"allowgraphupload",level:3},{value:"Return",id:"return",level:2},{value:"Examples",id:"examples",level:2},{value:"See Also",id:"see-also",level:2}],c={toc:p},u="wrapper";function g(e){let{components:r,...t}=e;return(0,o.yg)(u,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"startdebuggerserver"},"startDebuggerServer"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"startDebuggerServer")," function starts a Rivet debugger server. By creating a debugger server in your application, you can\nconnect to it from Rivet to debug graphs running in your application in real-time."),(0,o.yg)("h2",{id:"syntax"},"Syntax"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"function startDebuggerServer(options?: {\n  getClientsForProcessor?: (processor: GraphProcessor, allClients: WebSocket[]) => WebSocket[];\n  getProcessorsForClient?: (client: WebSocket, allProcessors: GraphProcessor[]) => GraphProcessor[];\n  server?: WebSocketServer;\n  port?: number;\n  dynamicGraphRun?: (data: { client: WebSocket; graphId: GraphId; inputs: GraphInputs }) => Promise<void>;\n  allowGraphUpload?: boolean;\n}): RivetDebuggerServer;\n")),(0,o.yg)("h2",{id:"parameters"},"Parameters"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"options")," (Object): The options for starting the debugger server. This should be an object with the following optional properties:")),(0,o.yg)("h3",{id:"getclientsforprocessor"},"getClientsForProcessor"),(0,o.yg)("p",null,"To allow multiple debuggers to connect to multiple processors, it is necessary to store a mapping of processors to clients."),(0,o.yg)("p",null,"This function takes a processor and all clients, and must return the clients for the processor."),(0,o.yg)("p",null,"If this function is not passed, then the server will assume that there is only one processor and all clients are connected to it."),(0,o.yg)("h3",{id:"getprocessorsforclient"},"getProcessorsForClient"),(0,o.yg)("p",null,"To allow multiple debuggers to connect to multiple processors, it is necessary to store a mapping of processors to clients."),(0,o.yg)("p",null,"This function takes a client and all processors, and must return the processors for the client."),(0,o.yg)("p",null,"If this function is not passed, then the server will assume that there is only one processor and all clients are connected to it."),(0,o.yg)("h3",{id:"server"},"server"),(0,o.yg)("p",null,"An instance of a WebSocket server. You may use this to override the default server."),(0,o.yg)("h3",{id:"port"},"port"),(0,o.yg)("p",null,"The port on which the default server will listen. The default port is 21888."),(0,o.yg)("h3",{id:"dynamicgraphrun"},"dynamicGraphRun"),(0,o.yg)("p",null,'Implement this function to allow pressing the "Start" button when remote debugging in Rivet to execute a graph inside your application dynamically.'),(0,o.yg)("p",null,"The function will be called with the WebSocket client calling the start, the graph ID of the graph to run, and optionally any inputs to run the\ngraph with. You must construct a Project and run the graph yourself, passing in the debugger server, to connect the execution with the dynamic graph run."),(0,o.yg)("p",null,"This function does not return anything, as the connection between the graph execution and the debugger server is handled by the ",(0,o.yg)("inlineCode",{parentName:"p"},"remoteDebugger")," parameter\npassed to the ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraph")," function."),(0,o.yg)("h3",{id:"allowgraphupload"},"allowGraphUpload"),(0,o.yg)("p",null,"If this is set to true, then the server will allow uploading graphs to the server. This is useful for debugging graphs that are not part of a project,\nor for debugging graphs that are part of a project but have not been saved to disk."),(0,o.yg)("h2",{id:"return"},"Return"),(0,o.yg)("p",null,"Returns an instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"RivetDebuggerServer"),". This should be passed to the ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraph")," function to allow the graph execution to communicate with the debugger server."),(0,o.yg)("h2",{id:"examples"},"Examples"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"const debuggerServer = startDebuggerServer({\n  port: 8080,\n  allowGraphUpload: true,\n  dynamicGraphRun: async ({ client, graphId, inputs }) => {\n    // Implement your dynamic graph run logic here\n  },\n});\n")),(0,o.yg)("h2",{id:"see-also"},"See Also"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./RivetDebuggerServer"},"RivetDebuggerServer")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./DebuggerEvents"},"DebuggerEvents")),(0,o.yg)("li",{parentName:"ul"},"WebSocketServer"),(0,o.yg)("li",{parentName:"ul"},"GraphProcessor"),(0,o.yg)("li",{parentName:"ul"},"GraphId")))}g.isMDXComponent=!0}}]);