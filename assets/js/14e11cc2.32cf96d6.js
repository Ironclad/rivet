"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4656],{1042:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(3249);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,h=c["".concat(u,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5089:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(3249),r=n(2689);const l={tabItem:"tabItem_o9Hs"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:n},t)}},2327:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7396),r=n(3249),l=n(2689),o=n(5986),i=n(6659),u=n(4532),s=n(5821),p=n(3312);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[u,s]=h({queryString:n,groupId:a}),[c,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,p.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=u??c;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),s(e),f(e)}),[s,f,l]),tabValues:l}}var g=n(3072);const k={tabList:"tabList_Dwv5",tabItem:"tabItem_KiUr"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=s[n].value;a!==i&&(c(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},o,{className:(0,l.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function y(e){const t=(0,g.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},8067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7396),r=(n(3249),n(1042)),l=n(2327),o=n(5089);const i={id:"external-call",title:"External Call Node",sidebar_label:"External Call"},u=void 0,s={unversionedId:"node-reference/external-call",id:"node-reference/external-call",title:"External Call Node",description:"External Call Node Screenshot",source:"@site/docs/node-reference/external-call.mdx",sourceDirName:"node-reference",slug:"/node-reference/external-call",permalink:"/docs/node-reference/external-call",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/node-reference/external-call.mdx",tags:[],version:"current",frontMatter:{id:"external-call",title:"External Call Node",sidebar_label:"External Call"},sidebar:"nodeReference",previous:{title:"Context",permalink:"/docs/node-reference/context"},next:{title:"Get Global",permalink:"/docs/node-reference/get-global"}},p={},c=[{value:"Overview",id:"overview",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Editor Settings",id:"editor-settings",level:2},{value:"Example 1: Make a database call from a graph",id:"example-1-make-a-database-call-from-a-graph",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"FAQ",id:"faq",level:2},{value:"See Also",id:"see-also",level:2}],d={toc:c},m="wrapper";function h(e){let{components:t,...i}=e;return(0,r.kt)(m,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"External Call Node Screenshot",src:n(1222).Z,width:"321",height:"155"})),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"When Rivet is running from a host application running ",(0,r.kt)("inlineCode",{parentName:"p"},"@ironclad/rivet-core")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@ironclad/rivet-node"),', then you can attach "External Functions" when running graphs or creating a GraphProcessor. The following external function ',(0,r.kt)("inlineCode",{parentName:"p"},"sum")," will sum all of its arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { runGraphInFile } from '@ironclad/rivet-node';\n\nawait runGraphInFile({\n  ...etc,\n  externalFunctions: {\n    sum: (...args) => {\n      return {\n        type: 'number',\n        value: args.reduce((acc, curr) => acc + curr, 0);\n      }\n    }\n  }\n})\n")),(0,r.kt)("p",null,"You can then call these external functions from within a graph using the ",(0,r.kt)("inlineCode",{parentName:"p"},"External Call")," node. The function to call is configured in the editor for the External Call node, and must match the name of the function you passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"externalFunctions")," when running the graph."),(0,r.kt)("p",null,"External functions are useful for many use-cases, they can do things like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get data from your database"),(0,r.kt)("li",{parentName:"ul"},"Call web APIs"),(0,r.kt)("li",{parentName:"ul"},"Get user information about who is running the graph"),(0,r.kt)("li",{parentName:"ul"},"Anything else you can think of!")),(0,r.kt)("p",null,"External functions are extremely powerful. They can only be used when running Rivet from a host application, and are not available when running Rivet in the Rivet applicaton. The external function nodes will error when running in the Rivet application. Use ",(0,r.kt)("a",{parentName:"p",href:"/docs/user-guide/remote-debugging"},"Remote Debugging")," to run External Call nodes in the Rivet application."),(0,r.kt)(l.Z,{defaultValue:"inputs",values:[{label:"Inputs",value:"inputs"},{label:"Outputs",value:"outputs"},{label:"Editor Settings",value:"settings"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"inputs",mdxType:"TabItem"},(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Title"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Arguments"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"any")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"any[]")),(0,r.kt)("td",{parentName:"tr",align:null},"The arguments to pass into the external call."),(0,r.kt)("td",{parentName:"tr",align:null},"(empty array)"),(0,r.kt)("td",{parentName:"tr",align:null},"To pass in multiple arguments, they must be an array. You can use an ",(0,r.kt)("a",{parentName:"td",href:"/docs/node-reference/array"},"Array Node")," to create an array of any data."))))),(0,r.kt)(o.Z,{value:"outputs",mdxType:"TabItem"},(0,r.kt)("h2",{id:"outputs"},"Outputs"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Title"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"(any)"),(0,r.kt)("td",{parentName:"tr",align:null},"The value returned from the external call."),(0,r.kt)("td",{parentName:"tr",align:null},"Can be any data type, make sure you're returning what you expect!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Error"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"If the external call errors, will be populated with the error message."),(0,r.kt)("td",{parentName:"tr",align:null},"Only enabled if ",(0,r.kt)("inlineCode",{parentName:"td"},"Use Error Output")," is turned on. If ",(0,r.kt)("inlineCode",{parentName:"td"},"Use Error Output")," is turned off, the node will error instead."))))),(0,r.kt)(o.Z,{value:"settings",mdxType:"TabItem"},(0,r.kt)("h2",{id:"editor-settings"},"Editor Settings"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Setting"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Use Input Toggle"),(0,r.kt)("th",{parentName:"tr",align:null},"Input Data Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Function Name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the external function as defined in ",(0,r.kt)("inlineCode",{parentName:"td"},"externalFunctions"),". Must match the function name defined in your code."),(0,r.kt)("td",{parentName:"tr",align:null},"(empty string)"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Use Error Output"),(0,r.kt)("td",{parentName:"tr",align:null},"If enabled, then the External Call node will not fail, but instead any error will appear in the ",(0,r.kt)("inlineCode",{parentName:"td"},"Error")," output port of the node. If disabled, the entire External Call node will error if the call errors."),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"N/A")))))),(0,r.kt)("h2",{id:"example-1-make-a-database-call-from-a-graph"},"Example 1: Make a database call from a graph"),(0,r.kt)("p",null,"In this example, we'll create a graph that makes a database call to get metadata about a single user. First, we'll define the external function that will make the database call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { runGraphInFile } from '@ironclad/rivet-node';\n\nconst db = {\n  async getUser(id: string) {\n    return {\n      name: 'test user',\n    };\n  },\n};\n\nawait runGraphInFile({\n  ...etc,\n  externalFunctions: {\n    getUser: async (userId: string) => {\n      const user = await db.getUser(userId);\n      return {\n        type: 'object',\n        value: user,\n      };\n    },\n  },\n});\n")),(0,r.kt)("p",null,"Then, in your graph, create an External Call Node, and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"Function Name")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"getUser"),". Create a ",(0,r.kt)("a",{parentName:"p",href:"/docs/node-reference/text"},"Text Node")," and set the text to the user's ID. Connect the Text Node to the External Call Node. The graph should look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"External Call Node Example 1",src:n(5721).Z,width:"569",height:"176"})),(0,r.kt)("p",null,"Run your application, and connect the ",(0,r.kt)("a",{parentName:"p",href:"/docs/user-guide/remote-debugging"},"Remote Debugger")," to it. Then, run the graph. You should see the object returned from the database call in the External Call node."),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"If the external function errors, then the External Call node will error. If you want to handle errors in the graph, then you can enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"Use Error Output")," setting. This will cause the External Call node to not error, but instead pass the error message to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," output port. If the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," port is populated, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"Result")," port will not be ran. You can use an ",(0,r.kt)("a",{parentName:"p",href:"/docs/node-reference/if"},"If Node")," to check if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," port is populated, and handle the error accordingly."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q: Can I use external functions when running Rivet in the Rivet application?")),(0,r.kt)("p",null,"No, external functions are only available when running Rivet from a host application. Connect the ",(0,r.kt)("a",{parentName:"p",href:"/docs/user-guide/remote-debugging"},"Remote Debugger")," to your host application to run external functions in the Rivet application."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q: What do I return from an external function?")),(0,r.kt)("p",null,"You must return a valid ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/DataValue"},"Data Value")," with a valid ",(0,r.kt)("a",{parentName:"p",href:"/docs/user-guide/data-types"},"Data Type"),", for example to return a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  type: 'string',\n  value: 'hello world',\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q: Can I return a Promise from an external function?")),(0,r.kt)("p",null,"Yes, you can return a Promise from an external function. The External Call node will wait for the Promise to resolve before continuing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Q: How are external functions different from raising events?")),(0,r.kt)("p",null,"External functions are synchronous, and can return data. Raising events are asynchronous, and cannot return data. The Raise Event node will not wait for the event to be handled before continuing, while the External Call node will wait for the external function to return before continuing."),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/user-guide/remote-debugging"},"Remote Debugging")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/node-reference/context"},"Context Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/node-reference/raise-event"},"Raise Event Node"))))}h.isMDXComponent=!0},5721:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/external-call-node-example-01-634b4e4072712ae319c1fe08b5a5ed7a.png"},1222:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/external-call-node-f3d90c1d10a6cb464d963e40f6c7a078.png"}}]);