"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8349],{5591:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>y});var r=n(8527);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=l(n),d=i,y=c["".concat(p,".").concat(d)]||c[d]||g[d]||a;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u[c]="string"==typeof e?e:i,o[1]=u;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8358:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>u,toc:()=>l});var r=n(4465),i=(n(8527),n(5591));const a={id:"run",sidebar_label:"run"},o="Rivet CLI - run Command",u={unversionedId:"cli/run",id:"cli/run",title:"Rivet CLI - run Command",description:"Run a Rivet graph in a project using provided input values.",source:"@site/docs/cli/run.md",sourceDirName:"cli",slug:"/cli/run",permalink:"/docs/cli/run",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/cli/run.md",tags:[],version:"current",frontMatter:{id:"run",sidebar_label:"run"},sidebar:"cli",previous:{title:"Rivet CLI",permalink:"/docs/cli"},next:{title:"serve",permalink:"/docs/cli/serve"}},p={},l=[{value:"Quick Start",id:"quick-start",level:2},{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Options",id:"options",level:2},{value:"Input Configuration",id:"input-configuration",level:3},{value:"Output Configuration",id:"output-configuration",level:3}],s={toc:l},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,r.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"rivet-cli---run-command"},"Rivet CLI - ",(0,i.yg)("inlineCode",{parentName:"h1"},"run")," Command"),(0,i.yg)("p",null,"Run a Rivet graph in a project using provided input values."),(0,i.yg)("h2",{id:"quick-start"},"Quick Start"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'# Run with basic input\nnpx @ironclad/rivet-cli run my-project.rivet-project --input name=Alice\n\n# Run with JSON input\necho \'{"name": "Alice"}\' | npx @ironclad/rivet-cli run my-project.rivet-project --inputs-stdin\n\n# Run specific graph\nnpx @ironclad/rivet-cli run my-project.rivet-project "My Graph" --input name=Alice\n')),(0,i.yg)("h2",{id:"description"},"Description"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"run")," command executes a Rivet graph with specified inputs. This is particularly useful for:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Testing graphs with specific inputs"),(0,i.yg)("li",{parentName:"ul"},"Integrating Rivet into command-line scripts and tools"),(0,i.yg)("li",{parentName:"ul"},"Automating graph execution from other programming languages"),(0,i.yg)("li",{parentName:"ul"},"Development and debugging of graph implementations")),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("p",null,"The basic usage will run the main graph in the provided project file, with no input values:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"npx @ironclad/rivet-cli run my-project.rivet-project\n")),(0,i.yg)("p",null,"You can also specify a specific graph in the file to run:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'npx @ironclad/rivet-cli run my-project.rivet-project "My Graph"\n')),(0,i.yg)("h2",{id:"inputs"},"Inputs"),(0,i.yg)("p",null,"Inputs can be provided in two ways. The first way is to use the ",(0,i.yg)("inlineCode",{parentName:"p"},"--input")," flag for each input value:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"npx @ironclad/rivet-cli run my-project.rivet-project --input input1=5 --input input2=10\n")),(0,i.yg)("p",null,"This is useful for basic input values and allows for easy testing of various scenarios."),(0,i.yg)("p",null,"The second way is to provide the inputs using a JSON object from standard input. This is useful for more complex input values:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},'echo \'{"input1": 5, "input2": 10}\' | npx @ironclad/rivet-cli run my-project.rivet-project --inputs-stdin\n')),(0,i.yg)("p",null,"This is useful for more complex input values, such as arrays or objects, as well as piping input values from other commands or scripts."),(0,i.yg)("h2",{id:"outputs"},"Outputs"),(0,i.yg)("p",null,"The Rivet CLI outputs JSON data to standard output. Each Graph Output node in the graph will correspond to a key in the output JSON object."),(0,i.yg)("p",null,"The value of each property will be a ",(0,i.yg)("a",{parentName:"p",href:"/docs/user-guide/data-types"},"Data Value")," object, with a ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," property and a ",(0,i.yg)("inlineCode",{parentName:"p"},"value")," property."),(0,i.yg)("p",null,"For example, if a graph has two Graph Output Nodes, ",(0,i.yg)("inlineCode",{parentName:"p"},"output1")," (a string) and ",(0,i.yg)("inlineCode",{parentName:"p"},"output2")," (a number), the output JSON object will look like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "output1": {\n    "type": "string",\n    "value": "Hello, World!"\n  }\n  "output2": {\n    "type": "number",\n    "value": 42\n  }\n}\n')),(0,i.yg)("h2",{id:"options"},"Options"),(0,i.yg)("h3",{id:"input-configuration"},"Input Configuration"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"--input")," - Specify an input value for the graph. Can be used multiple times."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"--inputs-stdin")," - Read input values from standard input as a JSON object. Overrides any input values provided with ",(0,i.yg)("inlineCode",{parentName:"li"},"--input"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"--context")," - Specify a single ",(0,i.yg)("a",{parentName:"li",href:"/docs/node-reference/context"},"context value")," for the graph. Can be used multiple times. Context can be used to pass global values to the graph. Context is specified using the same format as ",(0,i.yg)("inlineCode",{parentName:"li"},"--input"),".")),(0,i.yg)("h3",{id:"output-configuration"},"Output Configuration"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"--include-cost")," - Includes the cost of the graph execution in the output JSON object. The cost is included as a ",(0,i.yg)("inlineCode",{parentName:"li"},"cost")," property on the output JSON.")))}g.isMDXComponent=!0}}]);