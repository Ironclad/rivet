"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9398],{5591:(e,r,t)=>{t.d(r,{xA:()=>s,yg:()=>g});var n=t(8527);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},s=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(g,i(i({ref:r},s),{},{components:t})):n.createElement(g,i({ref:r},s))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},366:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=t(4465),o=(t(8527),t(5591));const a={},i="loadProjectFromString",l={unversionedId:"api-reference/node/loadProjectFromString",id:"api-reference/node/loadProjectFromString",title:"loadProjectFromString",description:"Description",source:"@site/docs/api-reference/node/loadProjectFromString.mdx",sourceDirName:"api-reference/node",slug:"/api-reference/node/loadProjectFromString",permalink:"/docs/api-reference/node/loadProjectFromString",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/node/loadProjectFromString.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"loadProjectFromFile",permalink:"/docs/api-reference/node/loadProjectFromFile"},next:{title:"runGraph",permalink:"/docs/api-reference/node/runGraph"}},c={},p=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return",id:"return",level:2},{value:"Examples",id:"examples",level:2},{value:"See Also",id:"see-also",level:2}],s={toc:p},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.yg)(d,(0,n.A)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"loadprojectfromstring"},"loadProjectFromString"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"loadProjectFromString")," function loads a project from a string content."),(0,o.yg)("h2",{id:"syntax"},"Syntax"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"function loadProjectFromString(content: string): Project;\n")),(0,o.yg)("h2",{id:"parameters"},"Parameters"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"content")," (string): The string content of the project. This must be a valid string representation of a project, loaded from a ",(0,o.yg)("inlineCode",{parentName:"li"},"*.rivet-project")," file.")),(0,o.yg)("h2",{id:"return"},"Return"),(0,o.yg)("p",null,"Returns a ",(0,o.yg)("inlineCode",{parentName:"p"},"Project"),". The ",(0,o.yg)("inlineCode",{parentName:"p"},"Project")," is a representation of the loaded project."),(0,o.yg)("h2",{id:"examples"},"Examples"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"const projectContent = await readFile('my-project.rivet-project', 'utf8');\nconst project = loadProjectFromString(projectContent);\n")),(0,o.yg)("h2",{id:"see-also"},"See Also"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./loadProjectFromFile"},"loadProjectFromFile")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./runGraphInFile"},"runGraphInFile")),(0,o.yg)("li",{parentName:"ul"},"Project")))}u.isMDXComponent=!0}}]);