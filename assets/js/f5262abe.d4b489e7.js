"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7915],{1042:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(3249);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,m=c["".concat(p,".").concat(d)]||c[d]||h[d]||i;return t?r.createElement(m,o(o({ref:n},s),{},{components:t})):r.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6222:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(7396),a=(t(3249),t(1042));const i={},o="runGraphInFile",l={unversionedId:"api-reference/node/runGraphInFile",id:"api-reference/node/runGraphInFile",title:"runGraphInFile",description:"Description",source:"@site/docs/api-reference/node/runGraphInFile.mdx",sourceDirName:"api-reference/node",slug:"/api-reference/node/runGraphInFile",permalink:"/docs/api-reference/node/runGraphInFile",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/node/runGraphInFile.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"runGraph",permalink:"/docs/api-reference/node/runGraph"},next:{title:"startDebuggerServer",permalink:"/docs/api-reference/node/startDebuggerServer"}},p={},u=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Return",id:"return",level:2},{value:"RunGraphOptions",id:"rungraphoptions",level:2},{value:"Examples",id:"examples",level:2},{value:"See Also",id:"see-also",level:2}],s={toc:u},c="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"rungraphinfile"},"runGraphInFile"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"runGraphInFile")," function allows you to execute a graph defined in a Rivet project file. This is the simplest way to get started with Rivet."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"function runGraphInFile(path: string, options: RunGraphOptions): Promise<Record<string, DataValue>>;\n")),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"path")," (string): A string representing the path to your Rivet project file.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options")," (RunGraphOptions): An object of type ",(0,a.kt)("inlineCode",{parentName:"p"},"RunGraphOptions"),". This type is used to pass various parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"runGraphInFile")," function."))),(0,a.kt)("h2",{id:"return"},"Return"),(0,a.kt)("p",null,"Returns a Promise that resolves to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Record<string, DataValue>"),". The record represents the outputs of the graph after it has been processed. Each\nkey in the record is the name of an output node id in the graph, and the value is the value is the data which was input to that node."),(0,a.kt)("h2",{id:"rungraphoptions"},"RunGraphOptions"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"RunGraphOptions")," type is used to pass various parameters to the ",(0,a.kt)("inlineCode",{parentName:"p"},"runGraphInFile")," function. It includes the following fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graph"),": Specifies the graph you're running. This can either be the ID or the display name of the graph."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"inputs"),': Specifies the input values to the graph. These can either be plain JavaScript values like "foo", or ',(0,a.kt)("inlineCode",{parentName:"li"},"{type: 'string', value: 'foo'}")," objects."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"context"),": Similar to ",(0,a.kt)("inlineCode",{parentName:"li"},"inputs"),", but these values are available to every graph and subgraph."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"externalFunctions"),": This is how you define integration points that you can call from inside Rivet graphs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openAiKey"),": Your OpenAI API key. This is required if you're using any Chat nodes in your graph."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openAiOrganization"),": If you are using a non-default OpenAI organization, you may specify your organization here.")),(0,a.kt)("p",null,"For more details, refer to ",(0,a.kt)("a",{parentName:"p",href:"./RunGraphOptions"},"RunGraphOptions"),"."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { runGraphInFile, DataValue } from '@ironclad/rivet-node';\n\nawait runGraphInFile('./myProject.rivet', {\n  graph: 'My Graph Name',\n  inputs: {\n    myInput: 'hello world',\n  },\n  context: {\n    myContext: 'global value',\n  },\n  externalFunctions: {\n    helloWorld: async (...args: unknown[]): Promise<DataValue> => {\n      return {\n        type: 'string',\n        value: 'hello world',\n      };\n    },\n  },\n  onUserEvent: {\n    myEvent: (data: DataValue): Promise<void> => {\n      console.log(data);\n    },\n  },\n  openAiKey: 'my-openai-key',\n  openAiOrganization: 'my-organization',\n});\n")),(0,a.kt)("h2",{id:"see-also"},"See Also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./loadProjectFromFile"},"loadProjectFromFile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./loadProjectFromString"},"loadProjectFromString")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./runGraph"},"runGraph")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./createProcessor"},"createProcessor")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"./RunGraphOptions"},"RunGraphOptions")),(0,a.kt)("li",{parentName:"ul"},"Project"),(0,a.kt)("li",{parentName:"ul"},"DataValue")))}h.isMDXComponent=!0}}]);