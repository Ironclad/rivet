"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6614],{5591:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>v});var t=r(8527);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,v=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?t.createElement(v,i(i({ref:n},p),{},{components:r})):t.createElement(v,i({ref:n},p))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4447:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(4465),a=(r(8527),r(5591));const o={id:"docker",sidebar_label:"Docker"},i="Rivet Server Docker Image",l={unversionedId:"cli/docker",id:"cli/docker",title:"Rivet Server Docker Image",description:"The serve command from the Rivet CLI is available as a Docker image, allowing you to run a Rivet server in a containerized environment.",source:"@site/docs/cli/docker.md",sourceDirName:"cli",slug:"/cli/docker",permalink:"/docs/cli/docker",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/cli/docker.md",tags:[],version:"current",frontMatter:{id:"docker",sidebar_label:"Docker"},sidebar:"cli",previous:{title:"serve",permalink:"/docs/cli/serve"}},s={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"With OpenAI Configuration",id:"with-openai-configuration",level:3},{value:"Custom Port",id:"custom-port",level:3},{value:"To Pass Additional Arguments",id:"to-pass-additional-arguments",level:3},{value:"Building Custom Images",id:"building-custom-images",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Volume Mounting",id:"volume-mounting",level:2},{value:"Examples",id:"examples",level:2},{value:"Using Docker Compose",id:"using-docker-compose",level:3},{value:"Using Kubernetes",id:"using-kubernetes",level:3}],p={toc:c},u="wrapper";function d(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"rivet-server-docker-image"},"Rivet Server Docker Image"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," command from the Rivet CLI is available as a Docker image, allowing you to run a Rivet server in a containerized environment."),(0,a.yg)("h2",{id:"quick-start"},"Quick Start"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"# Start a server on port 3000 with a mounted project directory\ndocker run -p 3000:3000 -v /path/to-project:/project abrennekeironclad/rivet-server:latest\n")),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"The Docker image provides the same functionality as the serve command, but packaged in a container for easier deployment and consistent environments. The server runs on port 3000 by default inside the container."),(0,a.yg)("p",null,"For more information on the ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," command, see the ",(0,a.yg)("a",{parentName:"p",href:"/docs/cli/serve"},"Rivet CLI documentation"),"."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"basic-usage"},"Basic Usage"),(0,a.yg)("p",null,"Mount your project directory and expose the server port:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 3000:3000 \\\n  -v /path/to/project:/project \\\n  abrennekeironclad/rivet-server:latest\n")),(0,a.yg)("h3",{id:"with-openai-configuration"},"With OpenAI Configuration"),(0,a.yg)("p",null,"To use OpenAI features, provide your API key as an environment variable:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 3000:3000 \\\n  -v /path/to/project:/project \\\n  -e OPENAI_API_KEY=your-api-key \\\n  abrennekeironclad/rivet-server:latest\n")),(0,a.yg)("h3",{id:"custom-port"},"Custom Port"),(0,a.yg)("p",null,"To use a different port:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 8080:3000 \\\n  -v /path/to/project:/project \\\n  abrennekeironclad/rivet-server:latest\n")),(0,a.yg)("h3",{id:"to-pass-additional-arguments"},"To Pass Additional Arguments"),(0,a.yg)("p",null,"To pass additional arguments to the server, append them to the end of the command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 3000:3000 \\\n  -v /path/to/project:/project \\\n  abrennekeironclad/rivet-server:latest --dev --allow-specifying-graph-id\n")),(0,a.yg)("h2",{id:"building-custom-images"},"Building Custom Images"),(0,a.yg)("p",null,"Instead of mounting your project at runtime, you can create your own Docker image that includes your Rivet project files. This is useful when you want to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Bundle your project files directly in the image"),(0,a.yg)("li",{parentName:"ul"},"Build a self-contained deployment artifact"),(0,a.yg)("li",{parentName:"ul"},"Set default CLI arguments")),(0,a.yg)("h3",{id:"basic-example"},"Basic Example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-dockerfile"},'FROM abrennekeironclad/rivet-server:latest\n\n# Copy project files into the image\nCOPY ./my-project-dir /project\n\n# Optionally set default CLI arguments\nCMD ["--dev", "--allow-specifying-graph-id"]\n')),(0,a.yg)("p",null,"Then, build and run the image:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"docker build -t my-rivet-server .\ndocker run -p 3000:3000 my-rivet-server\n")),(0,a.yg)("h2",{id:"environment-variables"},"Environment Variables"),(0,a.yg)("p",null,"See the ",(0,a.yg)("a",{parentName:"p",href:"/docs/cli/serve#options"},"Rivet CLI documentation")," for a list of environment variables that can be used with the server."),(0,a.yg)("h2",{id:"volume-mounting"},"Volume Mounting"),(0,a.yg)("p",null,"The container expects your Rivet project file to be mounted at ",(0,a.yg)("inlineCode",{parentName:"p"},"/project")," inside the container. The mounted directory should contain the Rivet project file and any other files needed by the project, such as any ",(0,a.yg)("inlineCode",{parentName:"p"},".rivet-data")," file."),(0,a.yg)("h2",{id:"examples"},"Examples"),(0,a.yg)("h3",{id:"using-docker-compose"},"Using Docker Compose"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"version: '3'\nservices:\n  rivet:\n    image: abrennekeironclad/rivet-server:latest\n    ports:\n      - '3000:3000'\n    volumes:\n      - ./my-project:/project\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n")),(0,a.yg)("h3",{id:"using-kubernetes"},"Using Kubernetes"),(0,a.yg)("p",null,"You can deploy the Rivet server to Kubernetes using a ConfigMap for your project file and environment variables for configuration."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: rivet-project\ndata:\n  project.rivet-project: |\n    # Your project file contents here\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rivet-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: rivet-server\n  template:\n    metadata:\n      labels:\n        app: rivet-server\n    spec:\n      containers:\n        - name: rivet-server\n          image: abrennekeironclad/rivet-server:latest\n          ports:\n            - containerPort: 3000\n          volumeMounts:\n            - name: project-volume\n              mountPath: /project\n      volumes:\n        - name: project-volume\n          configMap:\n            name: rivet-project\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: rivet-server\nspec:\n  selector:\n    app: rivet-server\n  ports:\n    - port: 80\n      targetPort: 3000\n  type: ClusterIP\n")))}d.isMDXComponent=!0}}]);