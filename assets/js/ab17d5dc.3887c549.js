"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9360],{5591:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>m});var r=n(8527);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=g(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,m=c["".concat(u,".").concat(d)]||c[d]||s[d]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var g={};for(var u in t)hasOwnProperty.call(t,u)&&(g[u]=t[u]);g.originalType=e,g[c]="string"==typeof e?e:o,a[1]=g;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>g,toc:()=>p});var r=n(4465),o=(n(8527),n(5591));const i={},a="Remote Debugging with Rivet",g={unversionedId:"api-reference/remote-debugging",id:"api-reference/remote-debugging",title:"Remote Debugging with Rivet",description:"Introduction",source:"@site/docs/api-reference/remote-debugging.md",sourceDirName:"api-reference",slug:"/api-reference/remote-debugging",permalink:"/docs/api-reference/remote-debugging",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/remote-debugging.md",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"Rivet Integration Getting Started",permalink:"/docs/api-reference/getting-started-integration"},next:{title:"API Overview",permalink:"/docs/api-reference/node/overview"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Setting Up Remote Debugging",id:"setting-up-remote-debugging",level:2},{value:"Connecting to the Debugger Server from Rivet",id:"connecting-to-the-debugger-server-from-rivet",level:2},{value:"Advanced Options",id:"advanced-options",level:2},{value:"See Also",id:"see-also",level:2}],l={toc:p},c="wrapper";function s(e){let{components:t,...n}=e;return(0,o.yg)(c,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"remote-debugging-with-rivet"},"Remote Debugging with Rivet"),(0,o.yg)("h2",{id:"introduction"},"Introduction"),(0,o.yg)("p",null,"One of the powerful features of Rivet is the ability to debug your graphs remotely. This means that you can execute a graph in your application and connect to it from Rivet to inspect the graph execution in real-time. This is achieved by using the ",(0,o.yg)("inlineCode",{parentName:"p"},"RivetDebuggerServer")," which is included in the ",(0,o.yg)("inlineCode",{parentName:"p"},"@ironclad/rivet-node")," package."),(0,o.yg)("h2",{id:"setting-up-remote-debugging"},"Setting Up Remote Debugging"),(0,o.yg)("p",null,"In order to set up remote debugging, you need to create an instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"RivetDebuggerServer")," and pass it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraph")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraphInFile")," functions. This will allow the graph execution to communicate with the debugger server."),(0,o.yg)("p",null,"You should only call ",(0,o.yg)("inlineCode",{parentName:"p"},"startDebuggerServer")," once in your application. You can then pass the same instance to multiple ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraph")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraphInFile")," calls."),(0,o.yg)("p",null,"Here's an example of how you can do this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import { startDebuggerServer, runGraphInFile } from '@ironclad/rivet-node';\n\n// Start the debugger server\nconst debuggerServer = startDebuggerServer({\n  port: 8080, // Optional: default 21888\n});\n\n// Run the graph with the debugger server\nawait runGraphInFile('./myProject.rivet', {\n  graph: 'My Graph Name',\n  remoteDebugger: debuggerServer, // Pass the debugger server\n  // other options...\n});\n")),(0,o.yg)("p",null,"In this example, the ",(0,o.yg)("inlineCode",{parentName:"p"},"startDebuggerServer")," function is used to start the debugger server. The ",(0,o.yg)("inlineCode",{parentName:"p"},"port")," option is used to specify the port number on which the server will listen. The ",(0,o.yg)("inlineCode",{parentName:"p"},"runGraphInFile")," function is then used to run the graph, and the debugger server is passed as the ",(0,o.yg)("inlineCode",{parentName:"p"},"remoteDebugger")," option."),(0,o.yg)("h2",{id:"connecting-to-the-debugger-server-from-rivet"},"Connecting to the Debugger Server from Rivet"),(0,o.yg)("p",null,'Once the debugger server is running and a graph is being executed, you can connect to it from Rivet by clicking on the "Remote Debugging" button in the toolbar.'),(0,o.yg)("p",null,"The syntax uses a WebSocket URL with the following format by default:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"ws://<host>:<port>\n")),(0,o.yg)("p",null,"To connect to a locally running server, you can use"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"ws://localhost:21888\n")),(0,o.yg)("p",null,"However, you may use your own remote debugger WebSocket server and any URL you like in your application, but that is out of scope for this documentation."),(0,o.yg)("h2",{id:"advanced-options"},"Advanced Options"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"startDebuggerServer")," function provides several advanced options for handling multiple processors and clients, dynamic graph running, and graph uploading. For more details about these options, see the ",(0,o.yg)("a",{parentName:"p",href:"./node/startDebuggerServer"},"startDebuggerServer API documentation"),"."),(0,o.yg)("h2",{id:"see-also"},"See Also"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./getting-started-integration"},"Getting Started with Rivet Integration")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"./node/overview"},"Rivet Node API Reference"))))}s.isMDXComponent=!0}}]);