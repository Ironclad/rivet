"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1752],{5591:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>y});var t=a(8527);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(a),g=r,y=c["".concat(p,".").concat(g)]||c[g]||d[g]||o;return a?t.createElement(y,i(i({ref:n},u),{},{components:a})):t.createElement(y,i({ref:n},u))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3605:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=a(4465),r=(a(8527),a(5591));const o={},i="LooseDataValue",l={unversionedId:"api-reference/node/LooseDataValue",id:"api-reference/node/LooseDataValue",title:"LooseDataValue",description:"Description",source:"@site/docs/api-reference/node/LooseDataValue.mdx",sourceDirName:"api-reference/node",slug:"/api-reference/node/LooseDataValue",permalink:"/docs/api-reference/node/LooseDataValue",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/api-reference/node/LooseDataValue.mdx",tags:[],version:"current",frontMatter:{},sidebar:"apiReference",previous:{title:"DebuggerEvents",permalink:"/docs/api-reference/node/DebuggerEvents"},next:{title:"RivetDebuggerServer",permalink:"/docs/api-reference/node/RivetDebuggerServer"}},p={},s=[{value:"Description",id:"description",level:2},{value:"Definition",id:"definition",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Usage",id:"usage",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:s},c="wrapper";function d(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"loosedatavalue"},"LooseDataValue"),(0,r.yg)("h2",{id:"description"},"Description"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"LooseDataValue")," is a type that represents a loose data value. It can be a ",(0,r.yg)("inlineCode",{parentName:"p"},"DataValue"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"number"),", or ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean"),"."),(0,r.yg)("h2",{id:"definition"},"Definition"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"type LooseDataValue = DataValue | string | number | boolean;\n")),(0,r.yg)("h2",{id:"explanation"},"Explanation"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"DataValue"),": This is a specific type defined in the library. For more details, see the ",(0,r.yg)("a",{parentName:"li",href:"../core/DataValue"},"DataValue")," documentation page."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"string"),": A standard JavaScript string."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"number"),": A standard JavaScript number."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"boolean"),": A standard JavaScript boolean.")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"LooseDataValue")," is used in various places across the API, particularly as a type for inputs and context values in the ",(0,r.yg)("inlineCode",{parentName:"p"},"RunGraphOptions")," type."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"export type RunGraphOptions = {\n  inputs?: Record<string, LooseDataValue>;\n  context?: Record<string, LooseDataValue>;\n  // Other properties...\n};\n")),(0,r.yg)("p",null,"In this example, ",(0,r.yg)("inlineCode",{parentName:"p"},"inputs")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"context")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"RunGraphOptions")," can accept an object where the values can be a ",(0,r.yg)("inlineCode",{parentName:"p"},"DataValue"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"number"),", or ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean"),"."),(0,r.yg)("h2",{id:"see-also"},"See Also"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"../core/DataValue"},"DataValue")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"./RunGraphOptions"},"RunGraphOptions"))))}d.isMDXComponent=!0}}]);