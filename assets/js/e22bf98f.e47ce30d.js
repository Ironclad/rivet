"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[499],{5591:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>d});var n=a(8527);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),g=u(a),p=r,d=g["".concat(i,".").concat(p)]||g[p]||c[p]||l;return a?n.createElement(d,s(s({ref:t},m),{},{components:a})):n.createElement(d,s({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=p;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[g]="string"==typeof e?e:r,s[1]=o;for(var u=2;u<l;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8280:(e,t,a)=>{a.d(t,{A:()=>s});var n=a(8527),r=a(4351);const l={tabItem:"tabItem_o9Hs"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,s),hidden:a},t)}},6415:(e,t,a)=>{a.d(t,{A:()=>w});var n=a(4465),r=a(8527),l=a(4351),s=a(1808),o=a(1849),i=a(7917),u=a(8418),m=a(3514);function g(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??g(a);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=c(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[i,u]=d({queryString:a,groupId:n}),[g,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,m.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),h=(()=>{const e=i??g;return p({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),y(e)}),[u,y,l]),tabValues:l}}var h=a(8613);const f={tabList:"tabList_Dwv5",tabItem:"tabItem_KiUr"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:i,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:g}=(0,s.a_)(),c=e=>{const t=e.currentTarget,a=m.indexOf(t),n=u[a].value;n!==o&&(g(t),i(n))},p=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=m.indexOf(e.currentTarget)+1;t=m[a]??m[0];break}case"ArrowLeft":{const a=m.indexOf(e.currentTarget)-1;t=m[a]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:p,onClick:c},s,{className:(0,l.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=y(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(b,(0,n.A)({},e,t)),r.createElement(N,(0,n.A)({},e,t)))}function w(e){const t=(0,h.A)();return r.createElement(v,(0,n.A)({key:String(t)},e))}},2683:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>g});var n=a(4465),r=(a(8527),a(5591)),l=a(6415),s=a(8280);const o={id:"assemble-message",title:"Assemble Message Node",sidebar_label:"Assemble Message"},i=void 0,u={unversionedId:"node-reference/assemble-message",id:"node-reference/assemble-message",title:"Assemble Message Node",description:"Assemble Message Node Screenshot",source:"@site/docs/node-reference/assemble-message.mdx",sourceDirName:"node-reference",slug:"/node-reference/assemble-message",permalink:"/docs/node-reference/assemble-message",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/node-reference/assemble-message.mdx",tags:[],version:"current",frontMatter:{id:"assemble-message",title:"Assemble Message Node",sidebar_label:"Assemble Message"},sidebar:"nodeReference",previous:{title:"To JSON",permalink:"/docs/node-reference/to-json"},next:{title:"Assemble Prompt",permalink:"/docs/node-reference/assemble-prompt"}},m={},g=[{value:"Overview",id:"overview",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Outputs",id:"outputs",level:2},{value:"Editor Settings",id:"editor-settings",level:2},{value:"Example 1: Assemble a user message with text and an image",id:"example-1-assemble-a-user-message-with-text-and-an-image",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"FAQ",id:"faq",level:2},{value:"See Also",id:"see-also",level:2}],c={toc:g},p="wrapper";function d(e){let{components:t,...o}=e;return(0,r.yg)(p,(0,n.A)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Assemble Message Node Screenshot",src:a(262).A,width:"379",height:"224"})),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"The Assemble Message Node is designed to assemble a single chat message from multiple parts. It is similar to a ",(0,r.yg)("a",{parentName:"p",href:"/docs/node-reference/prompt"},"Prompt Node"),", but it works with multimodal models, allowing you to include both text and images in the message. This node is particularly useful when working with multimodal LLMs such as GPT-4 Vision that can process both text and images simultaneously."),(0,r.yg)("p",null,"The Assemble Message Node can be used in conjunction with the ",(0,r.yg)("a",{parentName:"p",href:"/docs/node-reference/image"},"Image Node")," or ",(0,r.yg)("a",{parentName:"p",href:"/docs/node-reference/url-reference"},"URL Reference Node")," to include images in a message."),(0,r.yg)("p",null,"The Assemble Message Node outputs a chat message in the same format as a ",(0,r.yg)("a",{parentName:"p",href:"/docs/node-reference/prompt"},"Prompt Node"),"."),(0,r.yg)(l.A,{defaultValue:"inputs",values:[{label:"Inputs",value:"inputs"},{label:"Outputs",value:"outputs"},{label:"Editor Settings",value:"settings"}],mdxType:"Tabs"},(0,r.yg)(s.A,{value:"inputs",mdxType:"TabItem"},(0,r.yg)("h2",{id:"inputs"},"Inputs"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Title"),(0,r.yg)("th",{parentName:"tr",align:null},"Data Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Default Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Part N"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string"),"/",(0,r.yg)("inlineCode",{parentName:"td"},"string[]"),"/",(0,r.yg)("inlineCode",{parentName:"td"},"image"),"/",(0,r.yg)("inlineCode",{parentName:"td"},"image[]")),(0,r.yg)("td",{parentName:"tr",align:null},"A part of the message to assemble. Arrays connected to inputs will be flattened, so connecting a single ",(0,r.yg)("inlineCode",{parentName:"td"},"image[]")," connection will put multiple images into the message."),(0,r.yg)("td",{parentName:"tr",align:null},"N/A"),(0,r.yg)("td",{parentName:"tr",align:null},"Dynamic number of input ports based on how many inputs are already connected to the node."))))),(0,r.yg)(s.A,{value:"outputs",mdxType:"TabItem"},(0,r.yg)("h2",{id:"outputs"},"Outputs"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Title"),(0,r.yg)("th",{parentName:"tr",align:null},"Data Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Notes"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Message"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"chat-message")),(0,r.yg)("td",{parentName:"tr",align:null},"The assembled chat message. The message will be in the same format as a message from a ",(0,r.yg)("a",{parentName:"td",href:"/docs/node-reference/prompt"},"Prompt Node"),"."),(0,r.yg)("td",{parentName:"tr",align:null},"The output will be a chat message containing the assembled data. The type of the message will be the specified type."))))),(0,r.yg)(s.A,{value:"settings",mdxType:"TabItem"},(0,r.yg)("h2",{id:"editor-settings"},"Editor Settings"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Setting"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Default Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Use Input Toggle"),(0,r.yg)("th",{parentName:"tr",align:null},"Input Data Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Type"),(0,r.yg)("td",{parentName:"tr",align:null},"The type of message to assemble. The value should be either 'system', 'user', 'assistant', or 'function'."),(0,r.yg)("td",{parentName:"tr",align:null},"'user'"),(0,r.yg)("td",{parentName:"tr",align:null},"Yes"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string"))))))),(0,r.yg)("h2",{id:"example-1-assemble-a-user-message-with-text-and-an-image"},"Example 1: Assemble a user message with text and an image"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Create an Assemble Message Node and set the Type to 'user'."),(0,r.yg)("li",{parentName:"ol"},"Create a ",(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/text"},"Text Node"),' and set the value to "Here is an image:". Connect the output of the Text Node to the first input of the Assemble Message Node.'),(0,r.yg)("li",{parentName:"ol"},"Create an ",(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/image"},"Image Node")," and browse for your image. Connect the output of the Image Node to the second input of the Assemble Message Node."),(0,r.yg)("li",{parentName:"ol"},"Run the graph. The ",(0,r.yg)("inlineCode",{parentName:"li"},"Message"),' output of the Assemble Message Node should contain a user message with the text "Here is an image of a cat:" and the text ',(0,r.yg)("inlineCode",{parentName:"li"},"(Image)")," indicating that an image is included in the message.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Assemble Message Node Example 1",src:a(3295).A,width:"1254",height:"1014"})),(0,r.yg)("h2",{id:"error-handling"},"Error Handling"),(0,r.yg)("p",null,"The Assemble Message Node will error if the ",(0,r.yg)("inlineCode",{parentName:"p"},"Type")," input is enabled and is set to an invalid value."),(0,r.yg)("h2",{id:"faq"},"FAQ"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Q: Can I include multiple images in a message?")),(0,r.yg)("p",null,"A: Yes, you can include multiple images in a message by connecting multiple input nodes."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Q: Can I use the Assemble Message Node with a function tool call?")),(0,r.yg)("p",null,"A: Yes, you can set the Type to 'function' to assemble a function response tool call message. Note that function tool call messages require a Tool Call ID, which can be provided via the ",(0,r.yg)("inlineCode",{parentName:"p"},"Tool Call ID")," input or setting. The output of the tool call is the assembled message content."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Q: Can I include a function call with an ",(0,r.yg)("inlineCode",{parentName:"strong"},"assistant"),"-type message?")),(0,r.yg)("p",null,"A: At this time, only the ",(0,r.yg)("a",{parentName:"p",href:"/docs/node-reference/prompt"},"Prompt Node")," supports function/tool calls with ",(0,r.yg)("inlineCode",{parentName:"p"},"assistant"),"-type messages."),(0,r.yg)("h2",{id:"see-also"},"See Also"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/prompt"},"Prompt Node")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/image"},"Image Node")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/url-reference"},"URL Reference Node")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/array"},"Array Node")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/node-reference/chat"},"Chat Node"))))}d.isMDXComponent=!0},3295:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/assemble-message-node-example-01-6bf162c8c957f04c0c51d9fb555f62b8.png"},262:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/assemble-message-node-78f820983d1493836f71bc6947ef703e.png"}}]);