"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1343],{5591:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>h});var a=n(8527);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,h=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1504:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(4465),r=(n(8527),n(5591));const i={sidebar_label:"Tutorial"},o="Trivet - Tutorial",s={unversionedId:"user-guide/trivet-tutorial",id:"user-guide/trivet-tutorial",title:"Trivet - Tutorial",description:"Suppose that we want to test a simple graph that executes a call against GPT-3.5, but that names the assistant:",source:"@site/docs/user-guide/trivet-tutorial.md",sourceDirName:"user-guide",slug:"/user-guide/trivet-tutorial",permalink:"/docs/user-guide/trivet-tutorial",draft:!1,editUrl:"https://github.com/ironclad/rivet/tree/main/packages/docs/docs/user-guide/trivet-tutorial.md",tags:[],version:"current",frontMatter:{sidebar_label:"Tutorial"},sidebar:"userGuide",previous:{title:"Validation Graphs",permalink:"/docs/user-guide/trivet-validation-graphs"},next:{title:"Trivet Library",permalink:"/docs/user-guide/trivet-library"}},l={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.yg)(c,(0,a.A)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"trivet---tutorial"},"Trivet - Tutorial"),(0,r.yg)("p",null,"Suppose that we want to test a simple graph that executes a call against GPT-3.5, but that names the assistant:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Simple GPT-3.5 graph",src:n(9966).A,width:"1430",height:"381"})),(0,r.yg)("p",null,"Let's make a wrapper test graph, so that we don't need to pass the name of the assistant in every test case:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Simple GPT-3.5 wrapper graph",src:n(8602).A,width:"1132",height:"368"})),(0,r.yg)("p",null,"Next, let's make a validator graph. It must have ",(0,r.yg)("inlineCode",{parentName:"p"},"input"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"output"),", and ",(0,r.yg)("inlineCode",{parentName:"p"},"expectedOutput")," ",(0,r.yg)("a",{parentName:"p",href:"../node-reference/graph-input"},"Graph Input")," nodes, and they must all be of type Object. In this case, we will use all 3 input nodes."),(0,r.yg)("p",null,"We extract the validation question from the ",(0,r.yg)("inlineCode",{parentName:"p"},"expectedOutput"),", and the actual output from ",(0,r.yg)("inlineCode",{parentName:"p"},"output"),", and the question from ",(0,r.yg)("inlineCode",{parentName:"p"},"input"),". We then ask GPT if the validation passes. The following prompt is used for this example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-markdown"},'An AI was asked the following question:\n\n"""\n{{question}}\n"""\n\nThe AI responded with:\n\n"""\n{{response}}\n"""\n\nYour goal is to perform this validation on the AI\'s response:\n\n"""\n{{validation}}\n"""\n\nReply YES if the validation passes. Reply NO if the validation does not pass, and explain why.\n')),(0,r.yg)("p",null,"With the following system prompt:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"You are a validator for AI responses.\n\nYou reply YES and nothing else when validation pass.\n\nYou reply NO and explain why when validations do not pass.\n")),(0,r.yg)("p",null,"The full validation graph looks as follows:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Simple GPT-3.5 validation graph",src:n(3269).A,width:"1933",height:"827"})),(0,r.yg)("p",null,"Next, let's make a test suite for this graph. Open the ",(0,r.yg)("inlineCode",{parentName:"p"},"Trivet Tests")," tab and create a new test suite with the following configuration:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Trivet test suite configuration",src:n(9363).A,width:"684",height:"222"})),(0,r.yg)("p",null,"Add a new test case with the following configuration:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Trivet test case configuration",src:n(5756).A,width:"391",height:"465"})),(0,r.yg)("p",null,"Note that for the input, you are asking GPT to perform the validation on this output, instead of validating the output directly. This is a useful pattern because you can check many more things than you can check programmatically, such as the tone and grammar strings!"),(0,r.yg)("p",null,"Next, click the ",(0,r.yg)("inlineCode",{parentName:"p"},"Run Test Suite")," button. You should see something like the following output appear in the test case editor:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Trivet test case output",src:n(4494).A,width:"399",height:"250"})),(0,r.yg)("p",null,"Congratulations! You've just run your first Trivet test suite! You can add more tests to this suite, or create more test suites for other graphs."))}d.isMDXComponent=!0},9966:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-01-39567855098096dd6e44cbe2b0eb36ec.png"},8602:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-02-d451bc030e04aed3b71d717728be847f.png"},9363:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-03-6ceafd3f339b5409fd6e04bc0c67dff3.png"},5756:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-04-f183f5b305022336b53faacf148628dd.png"},3269:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-05-ca97682121ec4d5d35156e03f67f2acb.png"},4494:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/trivet-example-06-a17406cc84c2111ab41bdc9ae6a3c0cc.png"}}]);